>>> say_my_name = __import__('3-say_my_name').say_my_name

# Test with valid first and last name
>>> say_my_name("John", "Doe")
My name is John Doe

# Test with valid first name only
>>> say_my_name("John")
My name is John

# Test with spaces around names
>>> say_my_name(" John ", " Doe ")
My name is John Doe

# Test with one name having multiple spaces
>>> say_my_name("John", "  Doe ")
My name is John Doe

# Type error with non-string first name
>>> say_my_name(123, "Doe")
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

# Type error with non-string last name
>>> say_my_name("John", 456)
Traceback (most recent call last):
    ...
TypeError: last_name must be a string

# Test with None as input
>>> say_my_name(None)
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

# Test print_sorted() with empty list
>>> my_list = MyList([])
>>> my_list.print_sorted()
[]
# Test with float input
>>> say_my_name(123.456)
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

# Test with complex type
>>> say_my_name(complex(1, 2))
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

# Test with dict type
>>> say_my_name({"first": "John"})
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

# Test with empty string
>>> say_my_name("")
My name is 

# Test Function without parameters
>>> say_my_name()
Traceback (most recent call last):
    ...
TypeError: say_my_name() missing 1 required positional argument: 'first_name'

# Test for new line
>>> say_my_name("\n\n", "Walter")
My name is  Walter

# Test with two empty parameters
>>> say_my_name("","")
My name is 

#Test arg1 empty string
>>> say_my_name("", "Holberton")
My name is  Holberton

# Test arg2 None
>>> say_my_name("Jose", None)
Traceback (most recent call last):
    ...
TypeError: last_name must be a string

# Additional test cases from initial description

>>> say_my_name("Julian", "Mendez")
My name is Julian Mendez

>>> say_my_name("Cornelius Mendez", "Jose J")
My name is Cornelius Mendez Jose J

>>> say_my_name(1, "John")
Traceback (most recent call last):
    ...
TypeError: first_name must be a string

>>> say_my_name("Mendez", ["Jose", "Prueba", "Test"])
Traceback (most recent call last):
    ...
TypeError: last_name must be a string

>>> say_my_name({"Mendez": 2, "Jose": 10}, 7.7)
Traceback (most recent call last):
    ...
TypeError: first_name must be a string
