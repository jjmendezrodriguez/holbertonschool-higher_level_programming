# 7-base_geometry.txt

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> isinstance(bg, BaseGeometry)
True
>>> isinstance(bg, object)
True

# Test area method to raise Exception
>>> bg.area()
Traceback (most recent call last):
    ...
Exception: area() is not implemented

# Test integer_validator method for non-integer value
>>> bg.integer_validator("age", "twenty")
Traceback (most recent call last):
    ...
TypeError: age must be an integer

# Test integer_validator method for value less than or equal to 0
>>> bg.integer_validator("age", 0)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

>>> bg.integer_validator("age", -5)
Traceback (most recent call last):
    ...
ValueError: age must be greater than 0

# Test integer_validator method for valid integer
>>> bg.integer_validator("age", 5)

# Additional test cases
>>> bg.integer_validator("valid number", 1)

>>> bg.integer_validator("invalid number", "number")
Traceback (most recent call last):
    ...
TypeError: invalid number must be an integer

>>> bg.integer_validator("another invalid", True)
Traceback (most recent call last):
    ...
TypeError: another invalid must be an integer

>>> bg.integer_validator("invalid tuple", (1,))
Traceback (most recent call last):
    ...
TypeError: invalid tuple must be an integer

>>> bg.integer_validator("and another", [3])
Traceback (most recent call last):
    ...
TypeError: and another must be an integer

>>> bg.integer_validator("more invalid testing", {3, 4})
Traceback (most recent call last):
    ...
TypeError: more invalid testing must be an integer

>>> bg.integer_validator("absolutely every possible invalid", None)
Traceback (most recent call last):
    ...
TypeError: absolutely every possible invalid must be an integer

>>> bg.integer_validator("invalid int", -1)
Traceback (most recent call last):
    ...
ValueError: invalid int must be greater than 0

>>> bg.integer_validator("invalid int", 0)
Traceback (most recent call last):
    ...
ValueError: invalid int must be greater than 0

>>> bg.integer_validator() # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(None) # doctest: +NORMALIZE_WHITESPACE
Traceback (most recent call last):
    ...
TypeError: integer_validator() missing 1 required positional argument: 'value'

>>> bg.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
    ...
TypeError: {'a': 1} must be an integer

# Test append method with valid integer
>>> bg.append(3)
>>> bg.append(1)
>>> bg.append(2)
>>> bg.values
[3, 1, 2]

# Test append method with invalid integer
>>> bg.append("four")
Traceback (most recent call last):
    ...
TypeError: value must be an integer

# Test print_sorted method
>>> bg.print_sorted()
[1, 2, 3]
